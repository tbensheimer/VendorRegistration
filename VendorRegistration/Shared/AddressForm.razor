@inject IJSRuntime JS
@inject ArcGisService ArcGisService

<EditForm Model="@Address" OnValidSubmit="() => HandleAddressComplete()" OnInvalidSubmit="() => HandleAddressAutofill()">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div id="container">

        @if (Address is not null)
        {
            <div class="company-address-group mb-1">
                <div class="mb-2">
                    <label for="international" class="fw-bold"><strong>International Address?</strong></label>
                    <br />
                    @if (Address.International)
                    {
                        <RadzenSwitch id="international" class="rz-switch-checked p-2" Change="() => HandleInternationalSwitch()" />
                    }
                    else
                    {
                        <RadzenSwitch id="international" class="p-2" Change="() => HandleInternationalSwitch()" />
                    }
                </div>
                <label for="company-location" class="fw-bold">Street Address<span style="color: red;"> *</span></label>

                @if (Address.International)
                {
                    <InputText @bind-Value="@Address.Address_1" class="form-control address mb-2" id="company-address2" name="address-line-1" type="text" />
                }
                else
                {
                    <div style="background-color: white;">
                        <BlazoredTypeahead id="company-location" SearchMethod="HandleAddressSuggestions"
                                   @bind-Value="Address.Address_1"
                                   MinimumLength="0"
                                   Debounce="500"
                                   EnableDropDown="true"
                                   ShowDropDownOnFocus="true">
                            <SelectedTemplate Context="address">
                                @(address.Split(", ").Count() == 4 ? "" : address.Split(", ")[0])
                                @if (address is not null)
                                {
                                    HandleAddressAutofill(address);
                                }

                            </SelectedTemplate>
                            <ResultTemplate Context="address">
                                @address
                            </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                }

                <label for="company-address2" class="fw-bold mt-2">Address Line 2 (No PO Box)</label>
                <InputText @bind-Value="@Address.Address_2" class="form-control address2 mb-2" id="company-address2" name="address-line-2" type="text" />

                <label for="company-city" class="fw-bold">City<span style="color: red;"> *</span></label>
                <InputText @bind-Value="@Address.City" class="form-control city mb-2" id="locality" name="city" type="text" />
            </div>

            <div class="company-address-group mb-3">

                @if (Address.International)
                {
                    <label for="state" class="fw-bold">State/Region/Providence<span style="color: red;">*</span></label>
                    <InputText @bind-Value="@Address.State_Region_Providence" name="state/region" class="form-control state mb-2" id="state" />
                }
                else
                {
                    <label for="state" class="fw-bold">State<span style="color: red;"> *</span></label>
                    <InputSelect @bind-Value="@Address.State_Region_Providence" name="state/region" class="form-control state mb-2" id="state">
                        <option value="">Choose a State...</option>
                        <option value="AL">Alabama</option>
                        <option value="AK">Alaska</option>
                        <option value="AZ">Arizona</option>
                        <option value="AR">Arkansas</option>
                        <option value="CA">California</option>
                        <option value="CO">Colorado</option>
                        <option value="CT">Connecticut</option>
                        <option value="DE">Delaware</option>
                        <option value="DC">District of Columbia</option>
                        <option value="FL">Florida</option>
                        <option value="GA">Georgia</option>
                        <option value="GU">Guam</option>
                        <option value="HI">Hawaii</option>
                        <option value="ID">Idaho</option>
                        <option value="IL">Illinois</option>
                        <option value="IN">Indiana</option>
                        <option value="IA">Iowa</option>
                        <option value="KS">Kansas</option>
                        <option value="KY">Kentucky</option>
                        <option value="LA">Louisiana</option>
                        <option value="ME">Maine</option>
                        <option value="MD">Maryland</option>
                        <option value="MA">Massachusetts</option>
                        <option value="MI">Michigan</option>
                        <option value="MN">Minnesota</option>
                        <option value="MS">Mississippi</option>
                        <option value="MO">Missouri</option>
                        <option value="MT">Montana</option>
                        <option value="NE">Nebraska</option>
                        <option value="NV">Nevada</option>
                        <option value="NH">New Hampshire</option>
                        <option value="NJ">New Jersey</option>
                        <option value="NM">New Mexico</option>
                        <option value="NY">New York</option>
                        <option value="NC">North Carolina</option>
                        <option value="ND">North Dakota</option>
                        <option value="MP">Northern Marianas Islands</option>
                        <option value="OH">Ohio</option>
                        <option value="OK">Oklahoma</option>
                        <option value="OR">Oregon</option>
                        <option value="PA">Pennsylvania</option>
                        <option value="PR">Puerto Rico</option>
                        <option value="RI">Rhode Island</option>
                        <option value="SC">South Carolina</option>
                        <option value="SD">South Dakota</option>
                        <option value="TN">Tennessee</option>
                        <option value="TX">Texas</option>
                        <option value="UT">Utah</option>
                        <option value="VT">Vermont</option>
                        <option value="VA">Virginia</option>
                        <option value="VI">Virgin Islands</option>
                        <option value="WA">Washington</option>
                        <option value="WV">West Virginia</option>
                        <option value="WI">Wisconsin</option>
                        <option value="WY">Wyoming</option>
                    </InputSelect>
                }

                <label for="company-postal" class="fw-bold">Postal Code<span style="color: red;"> *</span></label>
                @if(Address.International)
                {
                <input @bind-value="@postalCode" class="form-control zip mb-2" id="company-postal" name="postal-code" type="text" />
                }
                else
                {
                <InputText required @bind-Value="@Address.Postal_Code" class="form-control zip mb-2" id="company-postal" name="postal-code" type="text" />
                }

                <label for="country" class="fw-bold">Country<span style="color: red;"> *</span></label>
                <InputText @bind-Value="@Address.Country" class="form-control country mb-4" id="country" type="text" name="country" />
            </div>
        }

        <div class="label-error"></div>
        @if (IsEdit)
        {

            <button type="submit" class="btn btn-success btn-sm mb-2">Save Address Info</button>
        }
        else
        {
            <button type="button" @onclick="() => HandlePrevious()" class="btn btn-primary mb-3 mr-2">Previous</button>

            <button type="submit" class="btn btn-primary mb-3">Next</button>
        }
        @if (SaveAddressSuccess is not null)
        {
            <div class="alert alert-success">@SaveAddressSuccess</div>
        }
        @if (SaveAddressError is not null)
        {
            <div class="alert alert-danger">@SaveAddressError</div>
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public Address? Address { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    [Parameter]
    public EventCallback<int> AddressOnPrevious { get; set; }

    [Parameter]
    public string? SaveAddressSuccess { get; set; }

    [Parameter]
    public string? SaveAddressError { get; set; }

    private bool International = false;

    private string? postalCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(Address.International)
        {
            postalCode = Address.Postal_Code;
        }
    }

    private async Task HandleAddressComplete()
    {
        bool POBoxPresent1;
        bool POBoxPresent2;

        if (Address is not null && Address.Address_1 is not null)
        {
            POBoxPresent1 = Regex.IsMatch(Address.Address_1, @".*([p](\s|\.|\-)*[O](\s|\.|\-)*|post office\s*)b(ox|\.).*", RegexOptions.IgnoreCase);
            if (Address.Address_2 is not null)
            {
                POBoxPresent2 = Regex.IsMatch(Address.Address_2, @".*([p](\s|\.|\-)*[O](\s|\.|\-)*|post office\s*)b(ox|\.).*", RegexOptions.IgnoreCase);
                if (POBoxPresent2)
                {
                    SaveAddressError = "PO Boxes are not allowed in addresses. Please remove them.";
                    SaveAddressSuccess = null;
                    return;
                }
            }

            if(!Address.International)
            {
                var validPostal = Regex.IsMatch(Address.Postal_Code, @"^((\d{5}-\d{4})|(\d{5})|([A-Z]\d[A-Z]\s\d[A-Z]\d))$");

                if(!validPostal)
                {
                    SaveAddressSuccess = null;
                    SaveAddressError = "Invalid Postal Code. Format: XXXXX";
                    return;
                }
            }

            if (POBoxPresent1)
            {
                SaveAddressError = "PO Boxes are not allowed in addresses. Please remove them.";
                SaveAddressSuccess = null;
                return;
            }
            if(Address.State_Region_Providence is null || string.IsNullOrWhiteSpace(Address.State_Region_Providence))
            {
                SaveAddressSuccess = null;
                SaveAddressError = "Please enter your State/Region/Providence";
                return;
            }

            if(Address.International)
            {
                if(string.IsNullOrWhiteSpace(postalCode))
                {
                    SaveAddressSuccess = null;
                    SaveAddressError = "Please fill in postal code";
                    return;
                }

                Address.Postal_Code = postalCode;
            }
        }

        if (OnSubmit.HasDelegate)
        {
            SaveAddressError = null;
            await OnSubmit.InvokeAsync(true);
        }
    }

    public async Task HandlePrevious()
    {
        await AddressOnPrevious.InvokeAsync(3);
    }


    private async Task<IEnumerable<string>> HandleAddressSuggestions(string searchText)
    {
        var retAddresses = new List<string>();
        var argisResult = await ArcGisService.GetSuggestions(searchText);

        if (argisResult is not null && argisResult.suggestions is not null)
        {
            foreach (var sug in argisResult.suggestions)
            {
                retAddresses.Add(sug.text);
            }
        }

        return retAddresses;
    }

    private void HandleAddressAutofill(string address)
    {

        string[] addressDetails = address.Split(", ");

        if (Address is not null)
        {
            if (addressDetails.Count() == 3)
            {
                Address.Address_1 = addressDetails[0];
                Address.Address_2 = null;
                Address.City = addressDetails[0];
                Address.State_Region_Providence = addressDetails[1];
                Address.Postal_Code = null;
                Address.Country = addressDetails[2];
            }
            if (addressDetails.Count() == 4)
            {
                Address.Address_1 = null;
                Address.Address_2 = null;
                Address.Postal_Code = addressDetails[0];
                Address.City = addressDetails[1];
                Address.State_Region_Providence = addressDetails[2];
                Address.Country = addressDetails[3];
            }
            else if (addressDetails.Count() == 5)
            {
                Address.Address_1 = addressDetails[0];
                Address.Address_2 = null;
                Address.City = addressDetails[1];
                Address.State_Region_Providence = addressDetails[2];
                Address.Postal_Code = addressDetails[3];
                Address.Country = addressDetails[4];
            }
            else if (addressDetails.Count() == 6)
            {
                Address.Address_1 = addressDetails[1];
                Address.Address_2 = addressDetails[0];
                Address.City = addressDetails[2];
                Address.State_Region_Providence = addressDetails[3];
                Address.Postal_Code = addressDetails[4];
                Address.Country = addressDetails[5];
            }
        }
    }

    private void HandleInternationalSwitch()
    {
        if (Address is not null)
        {
            Address.International = !Address.International;
        }
    }

    private void HandleAddressAutofill()
    {
        SaveAddressSuccess = null;
        SaveAddressError = "Please fill all fields.";
    }
}