@page "/password-reset/{Random}/{AccountId:int}"
@inject NavigationManager NavigationManager
@inject VendorLinksService vendorLinksService
@inject AccountService accountService

<div style="width: 100%;" class="d-flex justify-content-center align-items-center">
    <div class="border shadow p-3" style="width: 65%; min-width: 350px; max-width: 1100px;">
        <h2 class="text-muted text-center mb-4">Enter your new password</h2>

        <div class="form-group">
            <label for="new-password">New Password:</label>
            <input type="password" disabled="@(PasswordSaved)" class="form-control" id="new-password" placeholder="Enter your new password" @bind="newPassword" />
        </div>

        <div class="form-group">
            <label for="new-password2">Confirm Password:</label>
            <input type="password" disabled="@(PasswordSaved)" class="form-control" id="new-password2" placeholder="Confirm your new password" @bind="newPassword2" />
        </div>

        <button disabled="@disabled" @onclick="() => ChangePassword()" type="button" class="btn btn-success btn-block mb-2">Save</button>
        <a href="/account/login" class="btn btn-secondary btn-block mb-2">Go to Login Page</a>

        @if (errorMessage is not null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        @if (successMessage is not null)
        {
            <div class="alert alert-success">@successMessage</div>
        }

    </div>
</div>

@code {
    [Parameter]
    public int AccountId { get; set; }
    [Parameter]
    public string? Random { get; set; }

    private string? newPassword { get; set; }

    private string? newPassword2 { get; set; }

    private string? errorMessage { get; set; }

    public List<VendorAccount>? Accounts { get; set; }

    public List<Vendor_Links>? Links { get; set; }

    private string? successMessage { get; set; }

    private bool PasswordSaved { get; set; }

    private string? currentLink { get; set; }

    private bool disabled = false;

    protected override async Task OnInitializedAsync()
    {
        Links = vendorLinksService.GetVendorLinks();

        currentLink = NavigationManager.Uri;

        if (Links.Any(link => link.Link == currentLink))
        {
            var LinkToRemove = Links.FirstOrDefault(link => link.Link == currentLink);

            if (LinkToRemove is not null)
            {
                vendorLinksService.DbRemoveLink(LinkToRemove);
            }

            NavigationManager.NavigateTo($"{currentLink}");
        }
        else
        {
            NavigationManager.NavigateTo("/account/login");
        }
        Accounts = accountService.GetVendorAccounts();

    }

    private async Task ChangePassword()
    {
        if (newPassword != newPassword2)
        {
            errorMessage = "Passwords must be the same";
            return;
        }

        if (newPassword is not null)
        {
            bool PasswordValid = Regex.IsMatch(newPassword, @"^(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^\w\d\s:])([^\s]){6,1000}$");

            if (PasswordValid && Accounts is not null)
            {
                try
                {
                    var account = accountService.GetAccountById(AccountId);

                    if (account is not null)
                    {
                        var salt = BCrypt.Net.BCrypt.GenerateSalt(12);
                        account.Password = BCrypt.Net.BCrypt.HashPassword(newPassword, salt);
                        accountService.DbUpdateAccount(account);
                        successMessage = "Password saved successfully!";
                        errorMessage = null;
                        PasswordSaved = true;
                        disabled = true;
                    }
                    else
                    {
                        errorMessage = "Account could not be found";
                        return;
                    }
                }
                catch
                {
                    errorMessage = "There was an error while changing passwords. Please try again.";
                    return;
                }
            }
            else
            {
                errorMessage = "Password doesn't meet security rules. Password must include at least one: Number, Uppercase Letter, Lowercase Letter, and non-alplha-numeric character. Password Length between 6 and 1000 characters (no spaces).";
                return;
            }
        }
    }
}