@page "/category-list/type/{TypeId:int}"
@using System.Security.Claims
@inject IJSRuntime JS
@inject CategoryService categoryService
@inject TypeService typeService
@inject IVendorClaimsPrincipal vendorClaimsPrinc

@if (role == "Admin")
{
	<div class="container d-flex flex-column ">
		@if (Type is not null)
		{
			<div class="d-flex flex-column">
				<a class="btn btn-sm btn-secondary align-self-start" href="/types-and-categories-list"><i class="fa-solid fa-sm fa-chevron-left"></i> Back</a>
				<h2 class="mb-4 title align-self-center">Categories for Type: <strong>@Type.Type_Name</strong></h2>
			</div>
		}

		<div class="tab-div">
			<button @onclick="@CatsListActive" class="tab1-btn send-notifs-content @(ActiveCats == true ? "active-page" : "")" type="button">Categories (@(ActiveCatsList?.Count() > 0 ? ActiveCatsList?.Count() : 0))</button>
			<button @onclick="@DeactivatedListActive" class="tab2-btn btn prev-notifs-content @(RemovedCats == true ? "active-page" : "")" type="button">Removed Categories (@(RemovedCatsList?.Count() > 0 ? RemovedCatsList?.Count() : 0))</button>
		</div>

		@if (ActiveCatsList is not null)
		{

			<button type="button" class="fw-bold btn btn-primary btn-sm mb-2 align-self-start" data-bs-toggle="modal" data-bs-target="#add-category">Add Category</button>

			<div class="row">
				<div class="col-12">
					<div class="card" style="box-shadow: 0px 0px 10px 4px rgb(230, 228, 228);">
						<div class="card-body">

							@if (ActiveCats)
							{
								<table id="category-table" class="table">
									<thead>
										<tr class="text-center" style="height: 3rem;">
											<th>Category</th>
											<th>Disable Category</th>
											<th></th>
										</tr>
									</thead>
									<tbody class="text-center">

										@foreach (var cat in ActiveCatsList)
										{
											<tr id="row-@cat.Id">
												<td>
													<label for="@cat.Id" hidden>@cat.Category_Name</label>
													<input type="text" class="form-control" name="@cat.Category_Name" @bind-value="@cat.Category_Name" id="@cat.Id" style="min-width: 8rem;" />
												</td>
												<td>
													@if (cat.Is_Disabled)
													{
														<RadzenText hidden TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Disable 1</RadzenText>
														<RadzenSwitch class="rz-switch-checked p-2" Change="() => HandleCategoryDeactivate(cat)" />
													}
													else
													{
														<RadzenText hidden TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Disable 0</RadzenText>
														<RadzenSwitch class="p-2" Change="() => HandleCategoryDeactivate(cat)" />
													}
												</td>
												<td>
													<button style="width: 146px; border: none !imporant;" @onclick="() => HandleCatRemove(cat.Id)" class="fw-bold btn btn-danger btn-sm">Remove Category</button>
												</td>
											</tr>
										}

									</tbody>
								</table>
							}

							@if (RemovedCats)
							{
								<table id="removed-table" class="table">
									<thead>
										<tr class="text-center" style="height: 3rem;">
											<th>Category</th>
											<th>Disable Category</th>
											<th></th>
										</tr>
									</thead>
									<tbody class="text-center">
										@if (RemovedCatsList is not null)
										{
											@foreach (var cat in RemovedCatsList)
											{
												<tr id="row-@cat.Id">
													<td>
														<label for="@cat.Id" hidden>@cat.Category_Name</label>
														<input type="text" class="form-control" name="@cat.Category_Name" @bind-value="@cat.Category_Name" id="@cat.Id" style="min-width: 8rem;" />
													</td>
													<td>
														@if (cat.Is_Disabled)
														{
															<RadzenText hidden TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Disable 1</RadzenText>
															<RadzenSwitch class="rz-switch-checked p-2" Change="() => HandleCategoryDeactivate(cat)" />
														}
														else
														{
															<RadzenText hidden TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Disable 0</RadzenText>
															<RadzenSwitch class="p-2" Change="() => HandleCategoryDeactivate(cat)" />
														}
													</td>
													<td>
														<button style="width: 146px; border: none !imporant;" @onclick="() => HandleCatEnable(cat.Id)" class="fw-bold btn btn-success btn-sm">Enable Category</button>
													</td>
												</tr>
											}
										}
									</tbody>
								</table>
							}
						</div>
					</div>
				</div>

			</div>

			<button disabled="@disabled" @onclick="() => HandleCategorySave()" type="button" class="btn btn-success btn-sm fw-bold mt-1 align-self-start mb-3">Save Changes</button>

			@if (SuccessMessage is not null)
			{
				<div class="alert alert-success">@SuccessMessage</div>
			}

			@if (ErrorMessage is not null)
			{
				<div class="alert alert-danger">@ErrorMessage</div>
			}

		}
		else
		{
			<div>Loading...</div>
		}

		<!-- Modal -->
		<div class="modal fade" id="add-category" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
				<div class="modal-content">
					<div class="modal-header justify-content-center">
						<h1 class="modal-title" id="staticBackdropLabel">Add a Category:</h1>
					</div>
					<div class="modal-body">
						<EditForm Context="Category" Model="@BCat">
							<label for="input-cat" hidden>Add Category</label>
							<InputText style="box-shadow: 0px 0px 1px 1px rgb(230, 228, 228);" @bind-Value="@InputCat" id="input-cat" type="text" name="input-cat" class="form-control mb-3" placeholder=" Add a Category" />
						</EditForm>

						@if (SuccessMessage is not null)
						{
							<div class="alert alert-success">@SuccessMessage</div>
						}

						@if (ErrorMessage is not null)
						{
							<div class="alert alert-danger">@ErrorMessage</div>
						}
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						<button @onclick="() => HandleCatAdd()" type="button" class="btn btn-primary">Add</button>
					</div>
				</div>
			</div>
		</div>

	</div>
}
else
{
	<div class="alert alert-danger text-center">You are not authorized to view this page.</div>
}

@code {

	[Parameter]
	public int TypeId { get; set; }

	public List<Business_Categories>? CatList { get; set; }

	public List<Business_Categories>? ActiveCatsList { get; set; }

	public Business_Categories? BCat = new Business_Categories();

	public Business_Categories? Category { get; set; }

	private List<Business_Categories>? RemovedCatsList = new List<Business_Categories>();

	public Business_Types? Type { get; set; }

	private string? InputCat { get; set; }

	private string? SuccessMessage { get; set; }

	private string? ErrorMessage { get; set; }

	private bool DataTablePresent = false;

	private bool ActiveCats = true;

	private bool RemovedCats = false;

	private bool disabled = false;
	private ClaimsPrincipal? userAuth { get; set; }
	private string role { get; set; }

	protected override async void OnAfterRender(bool firstRender)
	{
		if (ActiveCatsList is not null && !DataTablePresent)
		{
			DataTablePresent = true;
			await JS.InvokeAsync<string>("blazorInterop.DataTablesAddOrderByDisabled", "#category-table");
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		userAuth = vendorClaimsPrinc.GetCurrentClaimsPrincipal();
		List<Claim> claims = new();

		if (userAuth != null)
		{
			claims = userAuth.Claims.ToList();

			role = claims?.FirstOrDefault(claim => claim.Type.Equals("Role"))?.Value;

			await LoadData();
		}
	}

	private async Task LoadData()
	{
		CatList = categoryService.GetCategoriesFromTypeId(TypeId);

		ActiveCatsList = CatList.Where(cat => !cat.Is_Deleted).ToList();

		RemovedCatsList = CatList.Where(cat => cat.Is_Deleted).ToList();

		StateHasChanged();

		Type = typeService.GetTypeFromId(TypeId);
		SuccessMessage = null;
		ErrorMessage = null;

	}


	private async Task HandleCatRemove(int CatId)
	{
		var dbCat = categoryService.GetCategoryFromId(CatId);

		if (dbCat is not null && CatList is not null)
		{
			var isOk = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to remove the category {dbCat.Category_Name}?");

			if (isOk)
			{
				try
				{
					dbCat.Is_Deleted = true;
					await categoryService.DbUpdateCategoryAsync(dbCat);

					await JS.InvokeAsync<string>("blazorInterop.DataTablesRemoveRow", $"#row-{CatId}");

					await JS.InvokeAsync<string>("blazorInterop.DataTablesRemove", "#category-table");

					await DataTableChange();

					SuccessMessage = "Category successfully removed!";
				}
				catch
				{
					await LoadData();
					ErrorMessage = "There was an error while removing category. Please try again.";
				}
			}
		}
	}

	private async Task HandleCatEnable(int CatId)
	{
		if (CatList is not null)
		{
			var dbCat = categoryService.GetCategoryFromId(CatId);

			if (dbCat is not null)
			{
				var isOk = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to enable the category {dbCat.Category_Name}?");

				if (isOk)
				{
					try
					{
						dbCat.Is_Deleted = false;
						await categoryService.DbUpdateCategoryAsync(dbCat);

						await JS.InvokeAsync<string>("blazorInterop.DataTablesRemoveRow", $"#row-{CatId}");

						await JS.InvokeAsync<string>("blazorInterop.DataTablesRemove", "#removed-table");

						await DataTableChange();

						SuccessMessage = "Successfully enabled category!";
					}
					catch
					{
						await LoadData();
						ErrorMessage = "There was an error while enabling the category. Please try again.";
					}
				}
			}
		}

	}

	private async Task HandleCatAdd()
	{

		if (InputCat is not null)
		{

			var duplicate = categoryService.FindDuplicateCategory(InputCat, TypeId);

			if (duplicate)
			{
				SuccessMessage = null;
				ErrorMessage = "There is an existing Category with the same name, please try again.";
				return;
			}

			try
			{
				Category = new Business_Categories();
				Category.Type_Id = TypeId;
				Category.Category_Name = InputCat;
				await categoryService.DbAddCategoryAsync(Category);

				await JS.InvokeAsync<string>("blazorInterop.DataTablesRemove", "#category-table");

				await DataTableChange();

				await JS.InvokeAsync<string>("blazorInterop.FocusOnInput", "#input-cat");

				InputCat = null;
				SuccessMessage = "Category successfully added!";
			}
			catch
			{
				await LoadData();
				ErrorMessage = "There was an error in adding a Category. Please try again.";
			}
		}
	}

	private async Task HandleCategorySave()
	{
		disabled = true;

		if (CatList is not null)
		{
			foreach (var cat in CatList)
			{
				var dbCat = categoryService.GetCategoryFromId(cat.Id);

				if (dbCat is not null && cat.Category_Name != "")
				{
					var duplicate = categoryService.FindDuplicateCategoryWithId(dbCat.Id, dbCat.Category_Name);

					if (duplicate)
					{
						SuccessMessage = null;
						ErrorMessage = "There is an existing Category with the same name, please try again.";
						disabled = false;
						return;
					}

					try
					{
						dbCat.Category_Name = cat.Category_Name;
						categoryService.DbUpdateCategory(dbCat);
						SuccessMessage = "Category changes saved successfully!";
					}
					catch
					{
						await LoadData();
						ErrorMessage = "There was an error while saving category changes. Please try again.";
					}
					finally
					{
						disabled = false;
					}
				}
			}
		}
	}

	public async Task HandleCategoryDeactivate(Business_Categories category)
	{
		category.Is_Disabled = !category.Is_Disabled;

		categoryService.DbUpdateCategory(category);

		if (ActiveCats)
		{
			await JS.InvokeAsync<string>("blazorInterop.DataTablesRemove", "#category-table");

			await JS.InvokeAsync<string>("blazorInterop.DataTablesAddOrderByDisabled", "#category-table");
		}

		if (RemovedCats)
		{
			await JS.InvokeAsync<string>("blazorInterop.DataTablesRemove", "#removed-table");

			await JS.InvokeAsync<string>("blazorInterop.DataTablesAddOrderByDisabled", "#removed-table");
		}
	}

	private async Task CatsListActive()
	{
		await JS.InvokeAsync<string>("blazorInterop.DataTablesRemove", "#removed-table");

		ActiveCats = true;
		RemovedCats = false;
		await DataTableChange();
	}

	private async Task DeactivatedListActive()
	{
		await JS.InvokeAsync<string>("blazorInterop.DataTablesRemove", "#category-table");

		ActiveCats = false;
		RemovedCats = true;
		await DataTableChange();
	}

	private async Task DataTableHandling()
	{
		if (ActiveCats)
		{
			await JS.InvokeAsync<string>("blazorInterop.DataTablesAddOrderByDisabled", "#category-table");

		}
		if (RemovedCats)
		{
			await JS.InvokeAsync<string>("blazorInterop.DataTablesAddOrderByDisabled", "#removed-table");
		}
	}

	private async Task DataTableChange()
	{
		await LoadData();
		StateHasChanged();
		await DataTableHandling();
	}
}
